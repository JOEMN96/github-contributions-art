// data-level="0" --> no Highlight

let A = [
  [0, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 0, 1, 0, 0],
  [1, 0, 0, 0, 1, 0, 0],
  [0, 1, 1, 1, 1, 1, 1],
];

let B = [
  [1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 1, 0, 0, 1],
  [1, 0, 0, 1, 0, 0, 1],
  [0, 1, 1, 0, 1, 1, 0],
];

let C = [
  [0, 1, 1, 1, 1, 1, 0],
  [1, 0, 0, 0, 0, 0, 1],
  [1, 0, 0, 0, 0, 0, 1],
  [0, 1, 0, 0, 0, 1, 0],
];

let D = [
  [1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 0, 0, 0, 1],
  [0, 1, 0, 0, 0, 1, 0],
  [0, 0, 1, 1, 1, 0, 0],
];

let E = [
  [1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 1, 0, 0, 1],
  [1, 0, 0, 1, 0, 0, 1],
  [1, 0, 0, 1, 0, 0, 1],
];

let F = [
  [1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 1, 0, 0, 0],
  [1, 0, 0, 1, 0, 0, 0],
  [1, 0, 0, 1, 0, 0, 0],
];

let G = [
  [0, 1, 1, 1, 1, 1, 0],
  [1, 0, 0, 0, 0, 0, 1],
  [1, 0, 0, 1, 0, 0, 1],
  [0, 1, 0, 1, 1, 1, 0],
];

let H = [
  [1, 1, 1, 1, 1, 1, 1],
  [0, 0, 0, 1, 0, 0, 0],
  [0, 0, 0, 1, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1],
];

let I = [
  [1, 0, 0, 0, 0, 0, 1],
  [1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 0, 0, 0, 1],
];

let J = [
  [1, 0, 0, 0, 0, 0, 1],
  [1, 0, 0, 0, 0, 0, 1],
  [1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 0, 0, 0, 0],
  [1, 0, 0, 0, 0, 0, 0],
];
let K = [
  [1, 1, 1, 1, 1, 1, 1],
  [0, 0, 1, 0, 1, 0, 0],
  [0, 1, 0, 0, 0, 1, 0],
  [1, 0, 0, 0, 0, 0, 1],
];
let L = [
  [1, 1, 1, 1, 1, 1, 1],
  [0, 0, 0, 0, 0, 0, 1],
  [0, 0, 0, 0, 0, 0, 1],
  [0, 0, 0, 0, 0, 0, 1],
];

let M = [
  [1, 1, 1, 1, 1, 1, 1],
  [0, 1, 0, 0, 0, 0, 0],
  [0, 0, 1, 1, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1],
];

let N = [
  [1, 1, 1, 1, 1, 1, 1],
  [0, 0, 1, 0, 0, 0, 0],
  [0, 0, 0, 1, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1],
];

let O = [
  [0, 1, 1, 1, 1, 1, 0],
  [1, 0, 0, 0, 0, 0, 1],
  [1, 0, 0, 0, 0, 0, 1],
  [0, 1, 1, 1, 1, 1, 0],
];

let P = [
  [1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 1, 0, 0, 0],
  [1, 0, 0, 1, 0, 0, 0],
  [1, 1, 1, 1, 0, 0, 0],
];

let Q = [
  [0, 1, 1, 1, 1, 1, 0],
  [1, 0, 0, 0, 0, 0, 1],
  [1, 0, 0, 0, 0, 1, 1],
  [0, 1, 1, 1, 1, 1, 0],
];

let R = [
  [1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 1, 1, 0, 0],
  [1, 0, 0, 1, 0, 1, 0],
  [1, 1, 1, 1, 0, 0, 1],
];

let S = [
  [1, 1, 1, 1, 0, 0, 1],
  [1, 0, 0, 1, 0, 0, 1],
  [1, 0, 0, 1, 0, 0, 1],
  [1, 0, 0, 1, 1, 1, 1],
];

let T = [
  [1, 0, 0, 0, 0, 0, 0],
  [1, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 0, 0, 0, 0],
  [1, 0, 0, 0, 0, 0, 0],
];

let U = [
  [1, 1, 1, 1, 1, 1, 0],
  [0, 0, 0, 0, 0, 0, 1],
  [0, 0, 0, 0, 0, 0, 1],
  [1, 1, 1, 1, 1, 1, 0],
];

let V = [
  [1, 1, 1, 1, 1, 0, 0],
  [0, 0, 0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0, 0, 1],
  [0, 0, 0, 0, 0, 1, 0],
  [1, 1, 1, 1, 1, 0, 0],
];

let W = [
  [1, 1, 1, 1, 1, 1, 1],
  [0, 0, 0, 0, 0, 1, 0],
  [0, 0, 0, 1, 1, 0, 0],
  [0, 0, 0, 0, 0, 1, 0],
  [1, 1, 1, 1, 1, 1, 1],
];
let X = [
  [1, 1, 0, 0, 0, 1, 1],
  [0, 0, 1, 0, 1, 0, 0],
  [0, 0, 0, 1, 0, 0, 0],
  [0, 0, 1, 0, 1, 0, 0],
  [1, 1, 0, 0, 0, 1, 1],
];
let Y = [
  [1, 1, 0, 0, 0, 0, 0],
  [0, 0, 1, 0, 0, 0, 0],
  [0, 0, 0, 1, 1, 1, 1],
  [0, 0, 1, 0, 0, 0, 0],
  [1, 1, 0, 0, 0, 0, 0],
];

let Z = [
  [1, 0, 0, 0, 0, 1, 1],
  [1, 0, 0, 0, 1, 0, 1],
  [1, 0, 0, 1, 0, 0, 1],
  [1, 0, 1, 0, 0, 0, 1],
  [1, 1, 0, 0, 0, 0, 1],
];

let SPACE = [[0, 0, 0, 0, 0, 0, 0]];

let letters = { A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z };

// let svg = document.querySelector('svg.js-calendar-graph-svg');
// let rects = svg.querySelectorAll('g  g rect');

// lettersTo8bit('Hi peps');

function lettersTo8bit(wordToRender, svg) {
  wordToRender = wordToRender.toUpperCase();
  wordToRender.replace(/[&\/\\#,+()$~%.'":*?<>{}]/g, '');
  let letterArr = [];

  for (let i = 0; i < wordToRender.length; i++) {
    if (wordToRender.charAt(i) == ' ') continue;
    letterArr.push(letters[wordToRender.charAt(i).toLocaleUpperCase()]);
    letterArr.push(SPACE);
  }
  renderer(letterArr, svg);
}

function renderer(letterArr, rects) {
  for (let i = 0; i < rects.length; i++) {
    letterArr.forEach((letter) => {
      // Each Letter
      letter.forEach((row) => {
        // individual cell
        row.forEach((cell) => {
          if (!rects[i]) return;
          rects[i].style.fill = cell ? '#30a14e' : '#ebedf0';
          i++;
        });
      });
    });
    break;
  }
}

chrome.runtime.onMessage.addListener((msg, sender, response) => {
  if (msg.command == 'Draw') {
    let textToDraw = msg.data;
    let svg = document.querySelectorAll('svg.js-calendar-graph-svg g  g rect');
    lettersTo8bit(textToDraw, svg);
  }
});
